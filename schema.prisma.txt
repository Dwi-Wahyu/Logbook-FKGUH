generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model pengguna {
  id        String         @id @default(uuid())
  nama      String         @unique
  username  String         @unique // nip untuk dosen, nim untuk mahasiswa
  password  String
  peran     pengguna_peran @default(MAHASISWA)
  avatar    String?
  signature String?

  profil profil?

  koBimbingan  pengguna[] @relation("KoPromotorMahasiswa")
  koPromotor   pengguna?  @relation("KoPromotorMahasiswa", fields: [koPromotorId], references: [id])
  koPromotorId String?

  bimbingan  pengguna[] @relation("PromotorMahasiswa")
  promotor   pengguna?  @relation("PromotorMahasiswa", fields: [promotorId], references: [id])
  promotorId String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  notifikasi notifikasi[]

  kegiatan           kegiatan[]           @relation("KegiatanDiajukan")
  tanggapan_kegiatan tanggapan_kegiatan[]

  logbook logbook?

  permohonan_bimbingan_dibuat   permohonan_bimbingan[] @relation("PermohonanBimbinganDibuat")
  permohonan_bimbingan_diterima permohonan_bimbingan[] @relation("PermohonanBimbinganDiterima")
}

model logbook {
  id         Int       @id @default(autoincrement())
  path       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  pengguna   pengguna? @relation(fields: [penggunaId], references: [id])
  penggunaId String?   @unique
}

model profil {
  id Int @id @default(autoincrement())

  judulDisertasi       String?
  angkatan             String?
  tempatTanggalLahir   String?
  alamat               String?
  alamatKeluarga       String?
  tahunLulus           String?
  mulaiMasukPendidikan DateTime?
  pekerjaan            String?
  nomorTelpon          String?
  email                String?

  // Relasi ke pengguna menggunakan ID
  pengguna   pengguna @relation(fields: [penggunaId], references: [id])
  penggunaId String   @unique
}

model permohonan_bimbingan {
  id                Int               @id @default(autoincrement())
  peranPembimbing   peran_pembimbing
  statusPermohonan  status_permohonan @default(TERKIRIM)
  kalimatPermohonan String            @db.Text
  alasanDitolak     String?
  mahasiswa         pengguna?         @relation("PermohonanBimbinganDibuat", fields: [mahasiswaId], references: [id])
  mahasiswaId       String?
  dosen             pengguna?         @relation("PermohonanBimbinganDiterima", fields: [dosenId], references: [id])
  dosenId           String?
  createdAt         DateTime          @default(now())
}

model mata_kuliah {
  id        Int        @id @default(autoincrement())
  judul     String     @unique()
  semester  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  kegiatan  kegiatan[]
}

model kegiatan {
  id             Int       @id @default(autoincrement())
  judul          String
  lokasi         String?
  tanggalMulai   DateTime?
  tanggalSelesai DateTime?

  // Ubah jadi disetujui jika semua pembimbing sudah menyetujui pada fungsi approve
  status    kegiatan_status      @default(DIAJUKAN)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  lampiran  lampiran_kegiatan[]
  tanggapan tanggapan_kegiatan[]

  pengaju   pengguna? @relation("KegiatanDiajukan", fields: [pengajuId], references: [id])
  pengajuId String?

  mata_kuliah   mata_kuliah? @relation(fields: [mata_kuliahId], references: [id])
  mata_kuliahId Int?
}

model tanggapan_kegiatan {
  id Int @id @default(autoincrement())

  catatan   String?
  status    kegiatan_status
  createdAt DateTime        @default(now())

  kegiatan     kegiatan? @relation(fields: [kegiatanId], references: [id])
  kegiatanId   Int?
  pengguna     pengguna? @relation(fields: [namaPengguna], references: [nama])
  namaPengguna String?

  @@unique([kegiatanId, namaPengguna])
}

model lampiran_kegiatan {
  id         Int       @id @default(autoincrement())
  path       String
  ext        String
  kegiatan   kegiatan? @relation(fields: [kegiatanId], references: [id])
  kegiatanId Int?
}

model notifikasi {
  id         Int      @id @default(autoincrement())
  judul      String
  pesan      String   @db.Text
  dibaca     Boolean  @default(false)
  createdAt  DateTime @default(now())
  penggunaId String
  pengguna   pengguna @relation(fields: [penggunaId], references: [id], map: "Notifikasi_penggunaId_fkey")

  @@index([penggunaId], map: "Notifikasi_penggunaId_fkey")
}

enum peran_pembimbing {
  PROMOTOR
  KOPROMOTOR
}

enum status_permohonan {
  TERKIRIM
  DITOLAK
  DISETUJUI
}

enum pengguna_peran {
  ADMIN
  MAHASISWA
  DOSEN
}

enum kegiatan_status {
  DIAJUKAN
  DISETUJUI
  DITOLAK
}
